{"version":3,"sources":["vector2d.js","boid.js","predator.js","obstacle.js","world.js","ui.js","render.js","index.js"],"names":["Vector2d","x","y","otherVector","scale","xDiff","yDiff","Math","sqrt","length","len","limit","norm","mul","angleRad","PI","dot","crs","atan2","degrees","rotateRad","radians","cos","sin","newX","newY","Boid","id","startPos","startVelocity","pos","vel","boids","predators","obstacles","acc","calculateForces","add","parameters","maxSpeed","width","height","neighbors","findNeighbors","separationForce","calculateSeparationForce","separationWeight","alignmentForce","calculateAlignmentForce","alignmentWeight","cohesionForce","calculateCohesionForce","cohesionWeight","obstacleForce","calculateObstacleAvoidanceForce","predatorsForce","calculatePredatorAvoidanceForce","filter","b","dst","neighborRadius","copy","averageAlignment","forEach","neighbor","getVel","boid","distanceVec","getPos","sub","weight","averagePos","div","fleeForce","predator","direction","avoidanceForce","obstacle","angle","rotate","Predator","lastVelChange","performance","now","random","predatorMaxSpeed","Obstacle","radius","randomInRange","min","max","World2","num","slice","i","push","r","mousePos","move","world","numBoids","numPredators","numObstacles","defaults","createUI","loadParameters","createSlider","createResetButton","createFPSCounter","paramsFromStorage","JSON","parse","localStorage","getItem","Object","assign","paramsUpdated","setItem","stringify","setNumBoids","setNumPredators","setNumObstacles","button","document","createElement","innerText","controls","getElementById","addEventListener","console","log","window","location","reload","appendChild","param","step","classList","label","htmlFor","slider","type","value","canvas","ctx","getContext","undefined","startRender","ev","rect","getBoundingClientRect","offsetX","offsetY","requestAnimationFrame","render","updateFps","update","fillStyle","fillRect","drawBoid","obs","radgrad","createRadialGradient","addColorStop","beginPath","arc","fill","color","strokeColor","point1","point2","point3","strokeStyle","moveTo","lineTo","stroke","avgDelta","lastRender","toFixed"],"mappings":"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","file":"src.f06bba7b.js","sourceRoot":"..\\src","sourcesContent":["export class Vector2d {\r\n    constructor(x, y) {\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.x = x;\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.y = y;\r\n    }\r\n\r\n    copy() {\r\n        return new Vector2d(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Adds the x and y of the other vector to this vector\r\n     * @param otherVector {Vector2d}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    add(otherVector) {\r\n        this.x += otherVector.x;\r\n        this.y += otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the x and y of the other vector to this vector\r\n     * @param otherVector {Vector2d}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    sub(otherVector) {\r\n        this.x -= otherVector.x;\r\n        this.y -= otherVector.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales x and y of this vector by the factor given by multiplying\r\n     * @param scale {Number}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    mul(scale) {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales x and y of this vector by the factor given by dividing\r\n     * @param scale {Number}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    div(scale) {\r\n        this.x /= scale;\r\n        this.y /= scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Distance between the other vector and this vector, as if both vectors describe a point\r\n     * @param otherVector {Vector2d}\r\n     * @returns {Number} the distance\r\n     */\r\n    dst(otherVector) {\r\n        const xDiff = this.x - otherVector.x;\r\n        const yDiff = this.y - otherVector.y;\r\n        return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n    }\r\n\r\n    /**\r\n     * Length of the vector\r\n     * @returns {Number} the length\r\n     */\r\n    len() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * Normalizes this vector (a vector with length 1, with the same angle)\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    norm() {\r\n        const length = this.len();\r\n        if (length !== 0) {\r\n            this.x /= length;\r\n            this.y /= length;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the length of this vector to the limit given. Keeps the angle\r\n     * @param limit {Number}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    limit(limit) {\r\n        if (this.len() > limit) {\r\n            return this.norm().mul(limit);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Angle of this vector relative to the other vector, from -180 to +180\r\n     * @param otherVector {Vector2d}\r\n     * @returns {Number} the angle\r\n     */\r\n    angle(otherVector) {\r\n        return this.angleRad(otherVector) * (180 / Math.PI)\r\n    }\r\n\r\n    /**\r\n     * Angle of this vector relative to the other vector, from -PI to +PI\r\n     * @param otherVector {Vector2d}\r\n     * @returns {Number} the angle in radians\r\n     */\r\n    angleRad(otherVector) {\r\n        const dot = this.x * otherVector.x + this.y * otherVector.y;\r\n        const crs = this.x * otherVector.y - this.y * otherVector.x;\r\n\r\n        return Math.atan2(crs, dot)\r\n    }\r\n\r\n    /**\r\n     * Rotates this vector, in degrees\r\n     * @param degrees {Number}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    rotate(degrees) {\r\n        return this.rotateRad(degrees * (Math.PI / 180));\r\n    }\r\n\r\n    /**\r\n     * Creates a new vector based on this one rotated, in radians\r\n     * @param radians {Number}\r\n     * @returns {Vector2d} this updated vector for chaining\r\n     */\r\n    rotateRad(radians) {\r\n        const cos = Math.cos(radians);\r\n        const sin = Math.sin(radians);\r\n\r\n        const newX = this.x * cos - this.y * sin;\r\n        const newY = this.x * sin + this.y * cos;\r\n\r\n        this.x = newX;\r\n        this.y = newY;\r\n        return this;\r\n    }\r\n\r\n\r\n}","import {Vector2d} from \"./vector2d\";\r\nimport {parameters} from \"./ui\";\r\n\r\nexport class Boid {\r\n\r\n    constructor(id, startPos, startVelocity) {\r\n        /**\r\n         * @type {String}\r\n         */\r\n        this.id = id;\r\n        /**\r\n         * @type {Vector2d}\r\n         */\r\n        this.pos = startPos;\r\n        /**\r\n         * @type {Vector2d}\r\n         */\r\n        this.vel = startVelocity;\r\n    }\r\n\r\n    /**\r\n     * @param boids {Array<Boid>}\r\n     * @param predators\r\n     * @param obstacles\r\n     */\r\n    move(boids, predators, obstacles) {\r\n        const acc = this.calculateForces(boids, predators, obstacles);\r\n        this.vel.add(acc).limit(parameters.maxSpeed);\r\n        this.pos.add(this.vel);\r\n\r\n        if (this.pos.x > parameters.width) this.pos.x -= parameters.width;\r\n        if (this.pos.x < 0) this.pos.x += parameters.width;\r\n\r\n        if (this.pos.y > parameters.height) this.pos.y -= parameters.height;\r\n        if (this.pos.y < 0) this.pos.y += parameters.height;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param boids {Array<Boid>}\r\n     * @param predators\r\n     * @param obstacles {Array<Obstacle>}\r\n     * @return {Vector2d}\r\n     */\r\n    calculateForces(boids, predators, obstacles) {\r\n        const neighbors = this.findNeighbors(boids);\r\n\r\n        const separationForce = this.calculateSeparationForce(neighbors).mul(parameters.separationWeight);\r\n        const alignmentForce = this.calculateAlignmentForce(neighbors).mul(parameters.alignmentWeight);\r\n        const cohesionForce = this.calculateCohesionForce(neighbors).mul(parameters.cohesionWeight);\r\n\r\n        const obstacleForce = this.calculateObstacleAvoidanceForce(obstacles);\r\n        const predatorsForce = this.calculatePredatorAvoidanceForce(predators);\r\n\r\n        return new Vector2d(0, 0)\r\n            .add(separationForce)\r\n            .add(alignmentForce)\r\n            .add(cohesionForce)\r\n            .add(obstacleForce)\r\n            .add(predatorsForce)\r\n    }\r\n\r\n    /**\r\n     * @param boids {Array<Boid>}\r\n     * @returns {Array<Boid>}\r\n     */\r\n    findNeighbors(boids) {\r\n        return boids.filter(b => b.pos.dst(this.pos) <= parameters.neighborRadius && b.id !== this.id);\r\n    }\r\n\r\n    /**\r\n     * @return {Vector2d}\r\n     */\r\n    getPos() {\r\n        return this.pos.copy();\r\n    }\r\n\r\n    /**\r\n     * @return {Vector2d}\r\n     */\r\n    getVel() {\r\n        return this.vel.copy();\r\n    }\r\n\r\n    /**\r\n     * @param neighbors {Array<Boid>}\r\n     * @returns {Vector2d}\r\n     */\r\n    calculateAlignmentForce(neighbors) {\r\n\r\n        // TODO: Oppgave 1 løses her, se README.md for beskrivelse\r\n        /*\r\n        const averageAlignment = new Vector2d(0, 0);\r\n        // Se vector2d.js for operasjoner på vektorer\r\n\r\n        neighbors.forEach(neighbor => {\r\n            // stuff per neighbor\r\n        });\r\n\r\n        return averageAlignment;\r\n         */\r\n\r\n        const averageAlignment = new Vector2d(0, 0);\r\n\r\n        neighbors.forEach(neighbor => {\r\n            averageAlignment.add(neighbor.getVel());\r\n        });\r\n\r\n        averageAlignment.norm();\r\n\r\n        return averageAlignment;\r\n    }\r\n\r\n    /**\r\n     * @param neighbors {Array<Boid>}\r\n     * @returns {Vector2d}\r\n     */\r\n    calculateSeparationForce(neighbors) {\r\n\r\n        // TODO Løs Oppgave 2 her\r\n\r\n        /*\r\n        const separationForce = new Vector2d(0, 0);\r\n\r\n        neighbors.forEach(boid => {\r\n            let separationForceForNeighbor == ...\r\n              // calculate\r\n\r\n            separationForce.add(separationForceForNeighbor);\r\n        });\r\n\r\n        return separationForce;\r\n         */\r\n\r\n        const separationForce = new Vector2d(0, 0);\r\n\r\n        neighbors.forEach(boid => {\r\n            const distanceVec = this.getPos().sub(boid.getPos());\r\n            const length = distanceVec.len();\r\n            const weight = (parameters.neighborRadius - length) / parameters.neighborRadius;\r\n            distanceVec.norm().mul(weight);\r\n            separationForce.add(distanceVec);\r\n        });\r\n\r\n        return separationForce;\r\n    }\r\n\r\n    /**\r\n     * @param neighbors {Array<Boid>}\r\n     * @returns {Vector2d}\r\n     */\r\n    calculateCohesionForce(neighbors) {\r\n\r\n        /*\r\n        const cohesionForce = new Vector2d(0, 0);\r\n\r\n        if (neighbors.length === 0) {\r\n            return cohesionForce\r\n        }\r\n\r\n        // TODO Oppgave 3 gjøres her\r\n        // ...\r\n\r\n        return cohesionForce;\r\n         */\r\n\r\n        const cohesionForce = new Vector2d(0, 0);\r\n\r\n        if (neighbors.length === 0) {\r\n            return cohesionForce\r\n        }\r\n\r\n        const averagePos = new Vector2d(0, 0);\r\n        neighbors.forEach(neighbor => {\r\n            averagePos.add(neighbor.getPos());\r\n        });\r\n        averagePos.div(neighbors.length);\r\n        cohesionForce.add(averagePos.sub(this.getPos()).norm());\r\n        return cohesionForce;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param predators {Array<Predator>}\r\n     * @returns {Vector2d}\r\n     */\r\n    calculatePredatorAvoidanceForce(predators) {\r\n\r\n        /*\r\n        // TODO oppgave 4 gjøres her\r\n\r\n        let fleeForce = new Vector2d(0, 0);\r\n\r\n        // predators.forEache(predator => ...);\r\n        // predator.getPos()\r\n\r\n\r\n        return fleeForce;\r\n         */\r\n\r\n        let fleeForce = new Vector2d(0, 0);\r\n\r\n        predators.forEach(predator => {\r\n            if (predator.getPos().dst(this.getPos()) > 50) return;\r\n\r\n            const direction = this.getPos().sub(predator.getPos());\r\n\r\n            fleeForce.add(direction);\r\n        });\r\n\r\n\r\n        return fleeForce.norm().mul(10);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param obstacles {Array<Obstacle>}\r\n     * @returns {Vector2d}\r\n     */\r\n    calculateObstacleAvoidanceForce(obstacles) {\r\n\r\n        /*\r\n        // TODO Oppgave 5 gjøres her\r\n\r\n        let avoidanceForce = new Vector2d(0, 0);\r\n\r\n        // obstacles.forEach(obstacle => ...);\r\n        // obstacle.getPos();\r\n\r\n        return avoidanceForce;\r\n\r\n         */\r\n\r\n        let avoidanceForce = new Vector2d(0, 0);\r\n\r\n        obstacles.forEach(obstacle => {\r\n            if (obstacle.getPos().dst(this.getPos()) > 100) return;\r\n\r\n            const direction = obstacle.getPos().sub(this.getPos());\r\n            const angle = direction.angle(this.getVel());\r\n\r\n            if (0 < angle && angle < 60) {\r\n                avoidanceForce.add(this.getVel().rotate(60).norm().mul(5))\r\n            } else if (-60 < angle && angle < 0) {\r\n                avoidanceForce.add(this.getVel().rotate(-60).norm().mul(5))\r\n\r\n            }\r\n        });\r\n\r\n\r\n        return avoidanceForce;\r\n    }\r\n}","import {Vector2d} from \"./vector2d\";\r\nimport {parameters} from \"./ui\";\r\nimport {randomInRange} from \"./world\";\r\n\r\nconst neighborRadius = 100;\r\n\r\n\r\nexport class Predator {\r\n\r\n    constructor(id, startPos, startVelocity) {\r\n        /**\r\n         * @type {String}\r\n         */\r\n        this.id = id;\r\n        /**\r\n         * @type {Vector2d}\r\n         */\r\n        this.pos = startPos;\r\n        /**\r\n         * @type {Vector2d}\r\n         */\r\n        this.vel = startVelocity;\r\n\r\n        this.lastVelChange = performance.now();\r\n    }\r\n\r\n    /**\r\n     * @return {Vector2d}\r\n     */\r\n    getPos() {\r\n        return this.pos.copy();\r\n    }\r\n\r\n    /**\r\n     * @return {Vector2d}\r\n     */\r\n    getVel() {\r\n        return this.vel.copy();\r\n    }\r\n\r\n    /**\r\n     * @param boids {Array<Boid>}\r\n     * @param predators\r\n     * @param obstacles\r\n     */\r\n    move(boids, predators, obstacles) {\r\n        if (performance.now() - this.lastVelChange > 500 && Math.random() > 0.9) {\r\n            this.lastVelChange = performance.now();\r\n            this.vel.rotate(randomInRange(-60, 60)).norm().mul(randomInRange(parameters.predatorMaxSpeed / 3, parameters.predatorMaxSpeed))\r\n        }\r\n\r\n        this.pos.add(this.vel);\r\n\r\n        if (this.pos.x > parameters.width) this.pos.x -= parameters.width;\r\n        if (this.pos.x < 0) this.pos.x += parameters.width;\r\n\r\n        if (this.pos.y > parameters.height) this.pos.y -= parameters.height;\r\n        if (this.pos.y < 0) this.pos.y += parameters.height;\r\n    }\r\n\r\n}","\r\nexport class Obstacle {\r\n    constructor(pos, radius) {\r\n        /**\r\n         * @type {Vector2d}\r\n         */\r\n        this.pos = pos;\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.radius = radius;\r\n    }\r\n\r\n    /**\r\n     * @return {Vector2d}\r\n     */\r\n    getPos() {\r\n        return this.pos.copy();\r\n    }\r\n\r\n    /**\r\n     * @return {Number}\r\n     */\r\n    getRadius() {\r\n        return this.radius;\r\n    }\r\n}","import {Vector2d} from \"./vector2d\";\r\nimport {parameters} from \"./ui\";\r\nimport {Boid} from \"./boid\";\r\nimport {Predator} from \"./predator\";\r\nimport {Obstacle} from \"./obstacle\";\r\n\r\n\r\nexport function randomInRange(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport class World2 {\r\n    constructor() {\r\n        this.boids = [];\r\n        this.predators = [];\r\n        this.obstacles = [];\r\n    }\r\n\r\n    setNumBoids(num) {\r\n        if (num < this.boids.length) {\r\n            this.boids = this.boids.slice(0, num);\r\n        } else {\r\n            for (let i = this.boids.length; i < num; i++) {\r\n                const vel = new Vector2d(0, 1)\r\n                    .rotate(randomInRange(0, 360))\r\n                    .mul(randomInRange(0.5, parameters.maxSpeed * 0.75));\r\n                const pos = new Vector2d(\r\n                    randomInRange(0, parameters.width),\r\n                    randomInRange(0, parameters.height)\r\n                );\r\n                this.boids.push(new Boid(i, pos, vel));\r\n            }\r\n        }\r\n    }\r\n\r\n    setNumPredators(num) {\r\n        if (num < this.predators.length) {\r\n            this.predators = this.predators.slice(0, num);\r\n        } else {\r\n            for (let i = this.predators.length; i < num; i++) {\r\n                const vel = new Vector2d(0, 1)\r\n                    .rotate(randomInRange(0, 360))\r\n                    .mul(randomInRange(0.5, parameters.predatorMaxSpeed));\r\n                const pos = new Vector2d(\r\n                    randomInRange(0, parameters.width),\r\n                    randomInRange(0, parameters.height)\r\n                );\r\n                this.predators.push(new Predator(i, pos, vel));\r\n            }\r\n        }\r\n    }\r\n\r\n    setNumObstacles(num) {\r\n        if (num < this.obstacles.length) {\r\n            this.obstacles = this.obstacles.slice(0, num);\r\n        } else {\r\n            for (let i = this.obstacles.length; i < num; i++) {\r\n                const pos = new Vector2d(\r\n                    randomInRange(0, parameters.width),\r\n                    randomInRange(0, parameters.height)\r\n                );\r\n                const r = randomInRange(15, 40);\r\n                this.obstacles.push(new Obstacle(pos, r));\r\n            }\r\n        }\r\n    }\r\n\r\n    update(mousePos) {\r\n        const predators = [...this.predators];\r\n        if (mousePos) {\r\n            predators.push({getPos: () => mousePos.copy(), getVel: () => new Vector2d(0, 0)})\r\n        }\r\n\r\n        this.boids.forEach(boid => boid.move(this.boids, predators, this.obstacles));\r\n        this.predators.forEach(predator => predator.move())\r\n    }\r\n}\r\n\r\n\r\nexport const world = new World2();","import {world} from \"./world\";\r\n\r\nexport const parameters = {\r\n    numBoids: 200,\r\n    neighborRadius: 40,\r\n    separationWeight: 1,\r\n    alignmentWeight: 1,\r\n    cohesionWeight: 1,\r\n    maxSpeed: 5,\r\n    numPredators: 1,\r\n    predatorMaxSpeed: 7.5,\r\n    numObstacles: 1,\r\n    width: 1200,\r\n    height: 900,\r\n};\r\n\r\nconst defaults = {...parameters};\r\n\r\nexport function createUI() {\r\n    loadParameters();\r\n    createSlider(\"numBoids\", 1, 2000, 1);\r\n    createSlider(\"separationWeight\", 0, 4, 0.01);\r\n    createSlider(\"alignmentWeight\", 0, 4, 0.01);\r\n    createSlider(\"cohesionWeight\", 0, 4, 0.01);\r\n    createSlider(\"maxSpeed\", 1, 10, 0.5);\r\n    createSlider(\"neighborRadius\", 0, 100, 5);\r\n    createSlider(\"numPredators\", 0, 30, 1);\r\n    createSlider(\"predatorMaxSpeed\", 1, 10, 0.5);\r\n    createSlider(\"numObstacles\", 0, 30, 1);\r\n    createResetButton();\r\n    createFPSCounter();\r\n\r\n}\r\n\r\nfunction loadParameters() {\r\n    const paramsFromStorage = JSON.parse(localStorage.getItem(\"params\"));\r\n    Object.assign(parameters, paramsFromStorage);\r\n    paramsUpdated();\r\n}\r\n\r\nfunction paramsUpdated() {\r\n    localStorage.setItem(\"params\", JSON.stringify(parameters));\r\n    world.setNumBoids(parameters.numBoids);\r\n    world.setNumPredators(parameters.numPredators);\r\n    world.setNumObstacles(parameters.numObstacles);\r\n}\r\n\r\nfunction createResetButton() {\r\n    const button = document.createElement(\"button\");\r\n    button.innerText = \"reset\";\r\n    const controls = document.getElementById(\"controls\");\r\n    button.addEventListener(\"click\", () => {\r\n        console.log(\"reset\");\r\n        Object.assign(parameters, defaults);\r\n        paramsUpdated();\r\n        window.location.reload()\r\n    });\r\n\r\n    controls.appendChild(button);\r\n}\r\n\r\nfunction createSlider(param, min, max, step) {\r\n    const div = document.createElement(\"div\");\r\n    div.classList.add(\"slider\");\r\n\r\n    const label = document.createElement(\"label\");\r\n    label.htmlFor = param;\r\n    label.innerText = param + \": \" + parameters[param];\r\n\r\n    const slider = document.createElement(\"input\");\r\n    slider.type = \"range\";\r\n    slider.id = param;\r\n    slider.min = min;\r\n    slider.max = max;\r\n    slider.step = step;\r\n    slider.value = parameters[param];\r\n\r\n    slider.addEventListener(\"input\", () => {\r\n        parameters[param] = slider.value;\r\n        label.innerText = param + \": \" + parameters[param];\r\n        paramsUpdated();\r\n    });\r\n\r\n\r\n    div.appendChild(label);\r\n    div.appendChild(slider);\r\n\r\n    document.getElementById(\"controls\").appendChild(div);\r\n}\r\n\r\nfunction createFPSCounter() {\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"fpscounter\";\r\n    document.getElementById(\"controls\").appendChild(div);\r\n}","import {parameters} from \"./ui\";\r\nimport {world} from \"./world\";\r\nimport {Vector2d} from \"./vector2d\";\r\n\r\nconst canvas = document.getElementById('drawme');\r\nconst ctx = canvas.getContext('2d');\r\nlet mousePos = undefined;\r\n\r\nexport function startRender() {\r\n    canvas.addEventListener(\"mousemove\", (ev => {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const x = ev.offsetX * (canvas.width / rect.width);\r\n        const y = parameters.height - ev.offsetY * (canvas.height / rect.height);\r\n        mousePos = new Vector2d(x, y);\r\n    }));\r\n    canvas.addEventListener(\"mouseleave\", () => {\r\n        mousePos = undefined;\r\n    });\r\n    window.requestAnimationFrame(render);\r\n}\r\n\r\n\r\nfunction render() {\r\n    updateFps();\r\n\r\n    world.update(mousePos);\r\n\r\n    ctx.fillStyle = \"#15143c\";\r\n    ctx.fillRect(0, 0, parameters.width, parameters.height);\r\n\r\n    world.boids.forEach(boid => {\r\n        drawBoid(boid, \"#6ec5fe\", \"#8ef6fe\");\r\n    });\r\n\r\n    world.predators.forEach(predator => {\r\n        drawBoid(predator, \"#fd59bd\", \"#fdaedc\");\r\n    });\r\n\r\n    ctx.fillStyle = \"#ac2fff\";\r\n\r\n    world.obstacles.forEach(obs => {\r\n        const radgrad = ctx.createRadialGradient(obs.pos.x, parameters.height - obs.pos.y, 0, obs.pos.x, parameters.height - obs.pos.y, 50);\r\n        radgrad.addColorStop(1, \"#ac2fff\");\r\n        radgrad.addColorStop(0.5, \"#c868ff\");\r\n        radgrad.addColorStop(0, \"#d5a2ff\");\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = radgrad;\r\n        ctx.arc(obs.pos.x, parameters.height - obs.pos.y, obs.radius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    });\r\n\r\n    if (mousePos) {\r\n        const radgrad = ctx.createRadialGradient(mousePos.x, parameters.height - mousePos.y, 0, mousePos.x, parameters.height - mousePos.y, 10);\r\n        radgrad.addColorStop(1, \"#ac2fff\");\r\n        radgrad.addColorStop(0.5, \"#c868ff\");\r\n        radgrad.addColorStop(0, \"#d5a2ff\");\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = radgrad;\r\n        ctx.arc(mousePos.x, parameters.height - mousePos.y, 10, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    }\r\n\r\n    window.requestAnimationFrame(render);\r\n}\r\n\r\nfunction drawBoid(boid, color, strokeColor) {\r\n    const angle = -boid.vel.angleRad(new Vector2d(1, 0));\r\n    const point1 = new Vector2d(-6, -3).rotateRad(angle).add(boid.pos);\r\n    const point2 = new Vector2d(-6, 3).rotateRad(angle).add(boid.pos);\r\n    const point3 = new Vector2d(6, 0).rotateRad(angle).add(boid.pos);\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = color;\r\n    ctx.strokeStyle = strokeColor;\r\n    ctx.moveTo(point1.x, parameters.height - point1.y);\r\n    ctx.lineTo(point2.x, parameters.height - point2.y);\r\n    ctx.lineTo(point3.x, parameters.height - point3.y);\r\n    ctx.lineTo(point1.x, parameters.height - point1.y);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n}\r\n\r\nlet avgDelta = 0, lastRender = performance.now();\r\n\r\nfunction updateFps() {\r\n    const now = performance.now();\r\n    const delta = now - lastRender;\r\n    const diff = delta - avgDelta;\r\n    avgDelta += diff / 20;\r\n    lastRender = now;\r\n    document.getElementById(\"fpscounter\").innerText = (1000 / avgDelta).toFixed(0) + \" fps\";\r\n}","import {Vector2d} from \"./vector2d\";\r\nimport {createUI} from \"./ui\";\r\nimport {startRender} from \"./render\";\r\n\r\n\r\ncreateUI();\r\nstartRender();\r\n\r\n\r\n\r\n"]}